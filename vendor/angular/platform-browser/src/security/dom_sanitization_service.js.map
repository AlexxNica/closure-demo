{"version":3,"file":"dom_sanitization_service.js","sourceRoot":"","sources":["../../../../../modules/@angular/platform-browser/src/security/dom_sanitization_service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Sanitizer, SecurityContext} from '@angular/core';\n\nimport {sanitizeHtml} from './html_sanitizer';\nimport {sanitizeStyle} from './style_sanitizer';\nimport {sanitizeUrl} from './url_sanitizer';\n\nexport {SecurityContext};\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @stable\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @stable\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @stable\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @stable\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @stable\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @stable\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * @stable\n */\nexport abstract class DomSanitizer implements Sanitizer {\n/**\n *  Sanitizes a value for use in the given SecurityContext. * If value is trusted for the context, this method will unwrap the contained safe value and use it directly. Otherwise, value will be sanitized to be safe in the given context, for example by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation is responsible to make sure that the value can definitely be safely used in the given context.\n * @abstract\n * @param {?} context\n * @param {?} value\n * @return {?}\n */\nsanitize(context: SecurityContext, value: any) {}\n/**\n *  Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will leave safe HTML intact, so in most situations this method should not be used. * **WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustHtml(value: string) {}\n/**\n *  Bypass security and trust the given value to be safe style value (CSS). * **WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustStyle(value: string) {}\n/**\n *  Bypass security and trust the given value to be safe JavaScript. * **WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustScript(value: string) {}\n/**\n *  Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used in hyperlinks or `<img src>`. * **WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustUrl(value: string) {}\n/**\n *  Bypass security and trust the given value to be a safe resource URL, i.e. a location that may be used to load executable code from, like `<script src>`, or `<iframe src>`. * **WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustResourceUrl(value: string) {}\n}\n\n\n\nexport class DomSanitizerImpl extends DomSanitizer {\n/**\n * @param {?} ctx\n * @param {?} value\n * @return {?}\n */\nsanitize(ctx: SecurityContext, value: any): string {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value;\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return sanitizeHtml(String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return sanitizeStyle(value);\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @param {?} expectedType\n * @return {?}\n */\nprivate checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nDomSanitizerImpl.decorators;\n /** @nocollapse\n @type {?} */\nDomSanitizerImpl.ctorParameters;\n  }\n\n}\n\nabstract class SafeValueImpl implements SafeValue {\n/**\n * @param {?} changingThisBreaksApplicationSecurity\n */\nconstructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n/**\n * @abstract\n * @return {?}\n */\ngetTypeName() {}\n/**\n * @return {?}\n */\ntoString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nSafeValueImpl.prototype.changingThisBreaksApplicationSecurity;\n  }\n\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n/**\n * @return {?}\n */\ngetTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'ResourceURL'; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}