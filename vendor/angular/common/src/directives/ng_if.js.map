{"version":3,"file":"ng_if.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/directives/ng_if.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,gBAAgB,EAAC,MAAM,eAAe;AAE7E;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAEH;IAEA;;;OAGG;IACH,cAAoB,cAAgC,EAC5C,SAA8B;QADlB,mBAAc,GAAd,cAAc,CAAkB;QAC5C,cAAS,GAAT,SAAS,CAAqB;QAN9B,aAAQ,GAAG,KAAK,CAAC;IAMgB,CAAC;IAGxC,sBAAI,sBAAI;aAAR,UAAS,SAAc;YACrB,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACzD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACvC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;YAC9B,CAAC;QACH,CAAC;;;OAAA;IAaM,mCAA8B,GAArC;QACD,gBAAgB;QACjB,IAAI,CAAC,UAAU,CAAC;QACf;oBACY;QACb,IAAI,CAAC,cAAc,CAAC;QACnB,gBAAgB;QACjB,IAAI,CAAC,cAAc,CAAC;QACnB,gBAAgB;QACjB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;QACvB,gBAAgB;QACjB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC;QAC7B,gBAAgB;QACjB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;IACvB,CAAC;IA1BI,eAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,EAAG,EAAE;KAClD,CAAC;IACF,kBAAkB;IACX,mBAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,gBAAgB,GAAG;QAC1B,EAAC,IAAI,EAAE,WAAW,GAAG;KACpB,CAAC;IACK,mBAAc,GAA2C;QAChE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KACzB,CAAC;IAkBF,WAAC;AAAD,CAAC,AA/CD,IA+CC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\n/**\n * Removes or recreates a portion of the DOM tree based on an {expression}.\n *\n * If the expression assigned to `ngIf` evaluates to a falsy value then the element\n * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.\n *\n * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):\n *\n * ```\n * <div *ngIf=\"errorCount > 0\" class=\"error\">\n *   <!-- Error message displayed when the errorCount property in the current context is greater\n * than 0. -->\n *   {{errorCount}} errors detected\n * </div>\n * ```\n *\n * ### Syntax\n *\n * - `<div *ngIf=\"condition\">...</div>`\n * - `<div template=\"ngIf condition\">...</div>`\n * - `<template [ngIf]=\"condition\"><div>...</div></template>`\n *\n * @stable\n */\n\nexport class NgIf {\nprivate _hasView = false;\n/**\n * @param {?} _viewContainer\n * @param {?} _template\n */\nconstructor(private _viewContainer: ViewContainerRef,\nprivate _template: TemplateRef<Object>) {}\n\n  \n  set ngIf(condition: any) {\n    if (condition && !this._hasView) {\n      this._hasView = true;\n      this._viewContainer.createEmbeddedView(this._template);\n    } else if (!condition && this._hasView) {\n      this._hasView = false;\n      this._viewContainer.clear();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngIf]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngIf': [{ type: Input },],\n};\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nNgIf.decorators;\n /** @nocollapse\n @type {?} */\nNgIf.ctorParameters;\n /** @type {?} */\nNgIf.propDecorators;\n /** @type {?} */\nNgIf.prototype._hasView;\n /** @type {?} */\nNgIf.prototype._viewContainer;\n /** @type {?} */\nNgIf.prototype._template;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}