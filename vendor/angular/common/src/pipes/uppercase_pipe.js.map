{"version":3,"file":"uppercase_pipe.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/pipes/uppercase_pipe.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,IAAI,EAAgB,MAAM,eAAe;OAC1C,EAAC,OAAO,EAAC,MAAM,gBAAgB;OAC/B,EAAC,wBAAwB,EAAC,MAAM,+BAA+B;AAEtE;;;;;;;;;;;;;GAaG;AAEH;IAAA;IA2BA,CAAC;IA1BD;;;OAGG;IACH,iCAAS,GAAT,UAAU,KAAa;QACnB,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QACjC,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC9B,MAAM,IAAI,wBAAwB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;IAC7B,CAAC;IAQM,4CAA8B,GAArC;QACD,gBAAgB;QACjB,aAAa,CAAC,UAAU,CAAC;QACxB;oBACY;QACb,aAAa,CAAC,cAAc,CAAC;IAC3B,CAAC;IAbI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAC,IAAI,EAAE,WAAW,EAAC,EAAG,EAAE;KAC5C,CAAC;IACF,kBAAkB;IACX,4BAAc,GAA6D,EACjF,CAAC;IAUF,oBAAC;AAAD,CAAC,AA3BD,IA2BC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {isBlank} from '../facade/lang';\nimport {InvalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * @ngModule CommonModule\n * @whatItDoes Transforms string to uppercase.\n * @howToUse `expression | uppercase`\n * @description\n *\n * Converts value into an uppercase string using `String.prototype.toUpperCase()`.\n *\n * ### Example\n *\n * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}\n *\n * @stable\n */\n\nexport class UpperCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (isBlank(value)) return value;\n    if (typeof value !== 'string') {\n      throw new InvalidPipeArgumentError(UpperCasePipe, value);\n    }\n    return value.toUpperCase();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'uppercase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nUpperCasePipe.decorators;\n /** @nocollapse\n @type {?} */\nUpperCasePipe.ctorParameters;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}