{"version":3,"file":"fake_async.js","sourceRoot":"","sources":["../../../../modules/@angular/core/testing/fake_async.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst /** @type {?} */ FakeAsyncTestZoneSpec = ( /** @type {?} */((Zone as any)))['FakeAsyncTestZoneSpec'];\ntype ProxyZoneSpec = {\n  setDelegate(delegateSpec: ZoneSpec): void; getDelegate(): ZoneSpec; resetDelegate(): void;\n};\nconst /** @type {?} */ ProxyZoneSpec: {get(): ProxyZoneSpec; assertPresent: () => ProxyZoneSpec} =\n    ( /** @type {?} */((Zone as any)))['ProxyZoneSpec'];\n\nlet /** @type {?} */ _fakeAsyncTestZoneSpec: any = null;\n/**\n *  Clears out the shared fake async zone for a test. To be called in a global `beforeEach`. *\n * @return {?}\n */\nexport function resetFakeAsyncZone() {\n  _fakeAsyncTestZoneSpec = null;\n  ProxyZoneSpec.assertPresent().resetDelegate();\n}\n\nlet /** @type {?} */ _inFakeAsyncCall = false;\n/**\n *  Wraps a function to be executed in the fakeAsync zone: - microtasks are manually executed by calling `flushMicrotasks()`, - timers are synchronous, `tick()` simulates the asynchronous passage of time. * If there are any pending timers at the end of the function, an exception will be thrown. * Can be used to wrap inject() calls. * ## Example * {@example testing/ts/fake_async.ts region='basic'} *\n * @param {?} fn undefined *\n * @return {?}\n */\nexport function fakeAsync(fn: Function): (...args: any[]) => any {\n  return function(...args: any[]) {\n    const /** @type {?} */ proxyZoneSpec = ProxyZoneSpec.assertPresent();\n    if (_inFakeAsyncCall) {\n      throw new Error('fakeAsync() calls can not be nested');\n    }\n    _inFakeAsyncCall = true;\n    try {\n      if (!_fakeAsyncTestZoneSpec) {\n        if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n          throw new Error('fakeAsync() calls can not be nested');\n        }\n\n        _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n      }\n\n      let /** @type {?} */ res: any;\n      const /** @type {?} */ lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n      proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n      try {\n        res = fn(...args);\n        flushMicrotasks();\n      } finally {\n        proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n      }\n\n      if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n        throw new Error(\n            `${_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length} ` +\n            `periodic timer(s) still in the queue.`);\n      }\n\n      if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n        throw new Error(\n            `${_fakeAsyncTestZoneSpec.pendingTimers.length} timer(s) still in the queue.`);\n      }\n      return res;\n    } finally {\n      _inFakeAsyncCall = false;\n      resetFakeAsyncZone();\n    }\n  };\n}\n/**\n * @return {?}\n */\nfunction _getFakeAsyncZoneSpec(): any {\n  if (_fakeAsyncTestZoneSpec == null) {\n    throw new Error('The code should be running in the fakeAsync zone to call this function');\n  }\n  return _fakeAsyncTestZoneSpec;\n}\n/**\n *  Simulates the asynchronous passage of time for the timers in the fakeAsync zone. * The microtasks queue is drained at the very start of this function and after any timer callback has been executed. * ## Example * {@example testing/ts/fake_async.ts region='basic'} *\n * @param {?=} millis\n * @return {?}\n */\nexport function tick(millis: number = 0): void {\n  _getFakeAsyncZoneSpec().tick(millis);\n}\n/**\n *  Discard all remaining periodic tasks. *\n * @return {?}\n */\nexport function discardPeriodicTasks(): void {\n  const /** @type {?} */ zoneSpec = _getFakeAsyncZoneSpec();\n  const /** @type {?} */ pendingTimers = zoneSpec.pendingPeriodicTimers;\n  zoneSpec.pendingPeriodicTimers.length = 0;\n}\n/**\n *  Flush any pending microtasks. *\n * @return {?}\n */\nexport function flushMicrotasks(): void {\n  _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}