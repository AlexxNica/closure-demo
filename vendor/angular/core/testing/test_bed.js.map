{"version":3,"file":"test_bed.js","sourceRoot":"","sources":["../../../../modules/@angular/core/testing/test_bed.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompilerOptions, Component, Directive, Injector, ModuleWithComponentFactories, NgModule, NgModuleRef, NgZone, OpaqueToken, Pipe, PlatformRef, Provider, SchemaMetadata, Type} from '@angular/core';\nimport {AsyncTestCompleter} from './async_test_completer';\nimport {ComponentFixture} from './component_fixture';\nimport {stringify} from './facade/lang';\nimport {MetadataOverride} from './metadata_override';\nimport {TestingCompiler, TestingCompilerFactory} from './test_compiler';\n\nconst /** @type {?} */ UNDEFINED = new Object();\n\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @experimental\n */\nexport class TestComponentRenderer {\n/**\n * @param {?} rootElementId\n * @return {?}\n */\ninsertRootElement(rootElementId: string) {}\n}\n\nlet /** @type {?} */ _nextRootElementId = 0;\n\n/**\n * @experimental\n */\nexport const /** @type {?} */ ComponentFixtureAutoDetect = new OpaqueToken('ComponentFixtureAutoDetect');\n\n/**\n * @experimental\n */\nexport const /** @type {?} */ ComponentFixtureNoNgZone = new OpaqueToken('ComponentFixtureNoNgZone');\n\n/**\n * @experimental\n */\nexport type TestModuleMetadata = {\n  providers?: any[],\n  declarations?: any[],\n  imports?: any[],\n  schemas?: Array<SchemaMetadata|any[]>,\n};\n\n/**\n * @whatItDoes Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n * @description\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * @stable\n */\nexport class TestBed implements Injector {\n/**\n *  Initialize the environment for testing with a compiler factory, a PlatformRef, and an angular module. These are common to every test in the suite. * This may only be called once, to set up the common providers for the current test suite on the current platform. If you absolutely need to change the providers, first use `resetTestEnvironment`. * Test modules and platforms for individual platforms are available from '@angular/<platform_name>/testing'. *\n * @param {?} ngModule\n * @param {?} platform\n * @return {?}\n */\nstatic initTestEnvironment(ngModule: Type<any>, platform: PlatformRef): TestBed {\n    const /** @type {?} */ testBed = getTestBed();\n    testBed.initTestEnvironment(ngModule, platform);\n    return testBed;\n  }\n/**\n *  Reset the providers for the test injector. *\n * @return {?}\n */\nstatic resetTestEnvironment() { getTestBed().resetTestEnvironment(); }\n/**\n * @return {?}\n */\nstatic resetTestingModule(): typeof TestBed {\n    getTestBed().resetTestingModule();\n    return TestBed;\n  }\n/**\n *  Allows overriding default compiler providers and settings which are defined in test_injector.js\n * @param {?} config\n * @return {?}\n */\nstatic configureCompiler(config: {providers?: any[]; useJit?: boolean;}): typeof TestBed {\n    getTestBed().configureCompiler(config);\n    return TestBed;\n  }\n/**\n *  Allows overriding default providers, directives, pipes, modules of the test injector, which are defined in test_injector.js\n * @param {?} moduleDef\n * @return {?}\n */\nstatic configureTestingModule(moduleDef: TestModuleMetadata): typeof TestBed {\n    getTestBed().configureTestingModule(moduleDef);\n    return TestBed;\n  }\n/**\n *  Compile components with a `templateUrl` for the test's NgModule. It is necessary to call this function as fetching urls is asynchronous.\n * @return {?}\n */\nstatic compileComponents(): Promise<any> { return getTestBed().compileComponents(); }\n/**\n * @param {?} ngModule\n * @param {?} override\n * @return {?}\n */\nstatic overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): typeof TestBed {\n    getTestBed().overrideModule(ngModule, override);\n    return TestBed;\n  }\n/**\n * @param {?} component\n * @param {?} override\n * @return {?}\n */\nstatic overrideComponent(component: Type<any>, override: MetadataOverride<Component>):\n      typeof TestBed {\n    getTestBed().overrideComponent(component, override);\n    return TestBed;\n  }\n/**\n * @param {?} directive\n * @param {?} override\n * @return {?}\n */\nstatic overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>):\n      typeof TestBed {\n    getTestBed().overrideDirective(directive, override);\n    return TestBed;\n  }\n/**\n * @param {?} pipe\n * @param {?} override\n * @return {?}\n */\nstatic overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): typeof TestBed {\n    getTestBed().overridePipe(pipe, override);\n    return TestBed;\n  }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nstatic get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    return getTestBed().get(token, notFoundValue);\n  }\n/**\n * @param {?} component\n * @return {?}\n */\nstatic createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    return getTestBed().createComponent(component);\n  }\nprivate _instantiated: boolean = false;\nprivate _compiler: TestingCompiler = null;\nprivate _moduleRef: NgModuleRef<any> = null;\nprivate _moduleWithComponentFactories: ModuleWithComponentFactories<any> = null;\nprivate _compilerOptions: CompilerOptions[] = [];\nprivate _moduleOverrides: [Type<any>, MetadataOverride<NgModule>][] = [];\nprivate _componentOverrides: [Type<any>, MetadataOverride<Component>][] = [];\nprivate _directiveOverrides: [Type<any>, MetadataOverride<Directive>][] = [];\nprivate _pipeOverrides: [Type<any>, MetadataOverride<Pipe>][] = [];\nprivate _providers: Provider[] = [];\nprivate _declarations: Array<Type<any>|any[]|any> = [];\nprivate _imports: Array<Type<any>|any[]|any> = [];\nprivate _schemas: Array<SchemaMetadata|any[]> = [];\nprivate _activeFixtures: ComponentFixture<any>[] = [];\n/**\n *  Initialize the environment for testing with a compiler factory, a PlatformRef, and an angular module. These are common to every test in the suite. * This may only be called once, to set up the common providers for the current test suite on the current platform. If you absolutely need to change the providers, first use `resetTestEnvironment`. * Test modules and platforms for individual platforms are available from '@angular/<platform_name>/testing'. *\n * @param {?} ngModule\n * @param {?} platform\n * @return {?}\n */\ninitTestEnvironment(ngModule: Type<any>, platform: PlatformRef) {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    this.platform = platform;\n    this.ngModule = ngModule;\n  }\n/**\n *  Reset the providers for the test injector. *\n * @return {?}\n */\nresetTestEnvironment() {\n    this.resetTestingModule();\n    this.platform = null;\n    this.ngModule = null;\n  }\n/**\n * @return {?}\n */\nresetTestingModule() {\n    this._compiler = null;\n    this._moduleOverrides = [];\n    this._componentOverrides = [];\n    this._directiveOverrides = [];\n    this._pipeOverrides = [];\n\n    this._moduleRef = null;\n    this._moduleWithComponentFactories = null;\n    this._compilerOptions = [];\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._schemas = [];\n    this._instantiated = false;\n    this._activeFixtures.forEach((fixture) => fixture.destroy());\n    this._activeFixtures = [];\n  }\n\n  platform: PlatformRef = null;\n\n  ngModule: Type<any> = null;\n/**\n * @param {?} config\n * @return {?}\n */\nconfigureCompiler(config: {providers?: any[], useJit?: boolean}) {\n    this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n    this._compilerOptions.push(config);\n  }\n/**\n * @param {?} moduleDef\n * @return {?}\n */\nconfigureTestingModule(moduleDef: TestModuleMetadata) {\n    this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n    if (moduleDef.providers) {\n      this._providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.declarations) {\n      this._declarations.push(...moduleDef.declarations);\n    }\n    if (moduleDef.imports) {\n      this._imports.push(...moduleDef.imports);\n    }\n    if (moduleDef.schemas) {\n      this._schemas.push(...moduleDef.schemas);\n    }\n  }\n/**\n * @return {?}\n */\ncompileComponents(): Promise<any> {\n    if (this._moduleWithComponentFactories || this._instantiated) {\n      return Promise.resolve(null);\n    }\n\n    const /** @type {?} */ moduleType = this._createCompilerAndModule();\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n        .then((moduleAndComponentFactories) => {\n          this._moduleWithComponentFactories = moduleAndComponentFactories;\n        });\n  }\n/**\n * @return {?}\n */\nprivate _initIfNeeded() {\n    if (this._instantiated) {\n      return;\n    }\n    if (!this._moduleWithComponentFactories) {\n      try {\n        const /** @type {?} */ moduleType = this._createCompilerAndModule();\n        this._moduleWithComponentFactories =\n            this._compiler.compileModuleAndAllComponentsSync(moduleType);\n      } catch ( /** @type {?} */e) {\n        if (e.compType) {\n          throw new Error(\n              `This test module uses the component ${stringify(e.compType)} which is using a \"templateUrl\", but they were never compiled. ` +\n              `Please call \"TestBed.compileComponents\" before your test.`);\n        } else {\n          throw e;\n        }\n      }\n    }\n    this._moduleRef =\n        this._moduleWithComponentFactories.ngModuleFactory.create(this.platform.injector);\n    this._instantiated = true;\n  }\n/**\n * @return {?}\n */\nprivate _createCompilerAndModule(): Type<any> {\n    const /** @type {?} */ providers = this._providers.concat([{provide: TestBed, useValue: this}]);\n    const /** @type {?} */ declarations = this._declarations;\n    const /** @type {?} */ imports = [this.ngModule, this._imports];\n    const /** @type {?} */ schemas = this._schemas;\n\n    \n    class DynamicTestModule {\n    static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{providers: providers, declarations: declarations, imports: imports, schemas: schemas}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nDynamicTestModule.decorators;\n /** @nocollapse\n @type {?} */\nDynamicTestModule.ctorParameters;\n  }\n\n}\n\n    const /** @type {?} */ compilerFactory: TestingCompilerFactory =\n        this.platform.injector.get(TestingCompilerFactory);\n    this._compiler =\n        compilerFactory.createTestingCompiler(this._compilerOptions.concat([{useDebug: true}]));\n    this._moduleOverrides.forEach((entry) => this._compiler.overrideModule(entry[0], entry[1]));\n    this._componentOverrides.forEach(\n        (entry) => this._compiler.overrideComponent(entry[0], entry[1]));\n    this._directiveOverrides.forEach(\n        (entry) => this._compiler.overrideDirective(entry[0], entry[1]));\n    this._pipeOverrides.forEach((entry) => this._compiler.overridePipe(entry[0], entry[1]));\n    return DynamicTestModule;\n  }\n/**\n * @param {?} methodName\n * @param {?} methodDescription\n * @return {?}\n */\nprivate _assertNotInstantiated(methodName: string, methodDescription: string) {\n    if (this._instantiated) {\n      throw new Error(\n          `Cannot ${methodDescription} when the test module has already been instantiated. ` +\n          `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    this._initIfNeeded();\n    if (token === TestBed) {\n      return this;\n    }\n    // Tests can inject things from the ng module and from the compiler,\n    // but the ng module can't inject things from the compiler and vice versa.\n    const /** @type {?} */ result = this._moduleRef.injector.get(token, UNDEFINED);\n    return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n  }\n/**\n * @param {?} tokens\n * @param {?} fn\n * @return {?}\n */\nexecute(tokens: any[], fn: Function): any {\n    this._initIfNeeded();\n    const /** @type {?} */ params = tokens.map(t => this.get(t));\n    return fn(...params);\n  }\n/**\n * @param {?} ngModule\n * @param {?} override\n * @return {?}\n */\noverrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this._assertNotInstantiated('overrideModule', 'override module metadata');\n    this._moduleOverrides.push([ngModule, override]);\n  }\n/**\n * @param {?} component\n * @param {?} override\n * @return {?}\n */\noverrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this._assertNotInstantiated('overrideComponent', 'override component metadata');\n    this._componentOverrides.push([component, override]);\n  }\n/**\n * @param {?} directive\n * @param {?} override\n * @return {?}\n */\noverrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this._directiveOverrides.push([directive, override]);\n  }\n/**\n * @param {?} pipe\n * @param {?} override\n * @return {?}\n */\noverridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this._pipeOverrides.push([pipe, override]);\n  }\n/**\n * @param {?} component\n * @return {?}\n */\ncreateComponent<T>(component: Type<T>): ComponentFixture<T> {\n    this._initIfNeeded();\n    const /** @type {?} */ componentFactory = this._moduleWithComponentFactories.componentFactories.find(\n        (compFactory) => compFactory.componentType === component);\n    if (!componentFactory) {\n      throw new Error(\n          `Cannot create the component ${stringify(component)} as it was not imported into the testing module!`);\n    }\n    const /** @type {?} */ noNgZone = this.get(ComponentFixtureNoNgZone, false);\n    const /** @type {?} */ autoDetect: boolean = this.get(ComponentFixtureAutoDetect, false);\n    const /** @type {?} */ ngZone: NgZone = noNgZone ? null : this.get(NgZone, null);\n    const /** @type {?} */ testComponentRenderer: TestComponentRenderer = this.get(TestComponentRenderer);\n    const /** @type {?} */ rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n\n    const /** @type {?} */ initComponent = () => {\n      const /** @type {?} */ componentRef = componentFactory.create(this, [], `#${rootElId}`);\n      return new ComponentFixture<T>(componentRef, ngZone, autoDetect);\n    };\n\n    const /** @type {?} */ fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nTestBed.prototype._instantiated;\n /** @type {?} */\nTestBed.prototype._compiler;\n /** @type {?} */\nTestBed.prototype._moduleRef;\n /** @type {?} */\nTestBed.prototype._moduleWithComponentFactories;\n /** @type {?} */\nTestBed.prototype._compilerOptions;\n /** @type {?} */\nTestBed.prototype._moduleOverrides;\n /** @type {?} */\nTestBed.prototype._componentOverrides;\n /** @type {?} */\nTestBed.prototype._directiveOverrides;\n /** @type {?} */\nTestBed.prototype._pipeOverrides;\n /** @type {?} */\nTestBed.prototype._providers;\n /** @type {?} */\nTestBed.prototype._declarations;\n /** @type {?} */\nTestBed.prototype._imports;\n /** @type {?} */\nTestBed.prototype._schemas;\n /** @type {?} */\nTestBed.prototype._activeFixtures;\n /** @type {?} */\nTestBed.prototype.platform;\n /** @type {?} */\nTestBed.prototype.ngModule;\n  }\n\n}\n\nlet /** @type {?} */ _testBed: TestBed = null;\n/**\n * @return {?}\n */\nexport function getTestBed() {\n  return _testBed = _testBed || new TestBed();\n}\n/**\n *  Allows injecting dependencies in `beforeEach()` and `it()`. * Example: * ``` beforeEach(inject([Dependency, AClass], (dep, object) => { // some code that uses `dep` and `object` // ... })); * it('...', inject([AClass], (object) => { object.doSomething(); expect(...); }) ``` * Notes: - inject is currently a function because of some Traceur limitation the syntax should eventually becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });` *\n * @param {?} tokens\n * @param {?} fn\n * @return {?}\n */\nexport function inject(tokens: any[], fn: Function): () => any {\n  const /** @type {?} */ testBed = getTestBed();\n  if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n    return () =>\n               // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n        // the\n        // injected tokens.\n        testBed.compileComponents().then(() => {\n          const /** @type {?} */ completer: AsyncTestCompleter = testBed.get(AsyncTestCompleter);\n          testBed.execute(tokens, fn);\n          return completer.promise;\n        });\n  } else {\n    return () => testBed.execute(tokens, fn);\n  }\n}\n\n/**\n * @experimental\n */\nexport class InjectSetupWrapper {\n/**\n * @param {?} _moduleDef\n */\nconstructor(private _moduleDef: () => TestModuleMetadata) {}\n/**\n * @return {?}\n */\nprivate _addModule() {\n    const /** @type {?} */ moduleDef = this._moduleDef();\n    if (moduleDef) {\n      getTestBed().configureTestingModule(moduleDef);\n    }\n  }\n/**\n * @param {?} tokens\n * @param {?} fn\n * @return {?}\n */\ninject(tokens: any[], fn: Function): () => any {\n    return () => {\n      this._addModule();\n      return inject(tokens, fn)();\n    };\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nInjectSetupWrapper.prototype._moduleDef;\n  }\n\n}\n\n/**\n * @experimental\n */\nexport function withModule(moduleDef: TestModuleMetadata): InjectSetupWrapper;\nexport function withModule(moduleDef: TestModuleMetadata, fn: Function): () => any;\n/**\n * @param {?} moduleDef\n * @param {?=} fn\n * @return {?}\n */\nexport function withModule(moduleDef: TestModuleMetadata, fn: Function = null): (() => any)|\n    InjectSetupWrapper {\n  if (fn) {\n    return () => {\n      const /** @type {?} */ testBed = getTestBed();\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n      return fn();\n    };\n  }\n  return new InjectSetupWrapper(() => moduleDef);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}