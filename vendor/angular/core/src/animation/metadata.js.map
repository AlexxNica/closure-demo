{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/animation/metadata.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPresent} from '../facade/lang';\n\n/**\n * @experimental Animation support is experimental.\n */\nexport const /** @type {?} */ AUTO_STYLE = '*';\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link trigger trigger\n * animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport class AnimationEntryMetadata {\n/**\n * @param {?} name\n * @param {?} definitions\n */\nconstructor(public name: string,\npublic definitions: AnimationStateMetadata[]) {}\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAnimationEntryMetadata.prototype.name;\n /** @type {?} */\nAnimationEntryMetadata.prototype.definitions;\n  }\n\n}\n\n/**\n * @experimental Animation support is experimental.\n */\nexport abstract class AnimationStateMetadata {}\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link state state animation\n * function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport class AnimationStateDeclarationMetadata extends AnimationStateMetadata {\n/**\n * @param {?} stateNameExpr\n * @param {?} styles\n */\nconstructor(public stateNameExpr: string,\npublic styles: AnimationStyleMetadata) { super(); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAnimationStateDeclarationMetadata.prototype.stateNameExpr;\n /** @type {?} */\nAnimationStateDeclarationMetadata.prototype.styles;\n  }\n\n}\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the\n * {@link transition transition animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport class AnimationStateTransitionMetadata extends AnimationStateMetadata {\n/**\n * @param {?} stateChangeExpr\n * @param {?} steps\n */\nconstructor(public stateChangeExpr: string,\npublic steps: AnimationMetadata) { super(); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAnimationStateTransitionMetadata.prototype.stateChangeExpr;\n /** @type {?} */\nAnimationStateTransitionMetadata.prototype.steps;\n  }\n\n}\n\n/**\n * @experimental Animation support is experimental.\n */\nexport abstract class AnimationMetadata {}\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link keyframes keyframes\n * animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport class AnimationKeyframesSequenceMetadata extends AnimationMetadata {\n/**\n * @param {?} steps\n */\nconstructor(public steps: AnimationStyleMetadata[]) { super(); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAnimationKeyframesSequenceMetadata.prototype.steps;\n  }\n\n}\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link style style animation\n * function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport class AnimationStyleMetadata extends AnimationMetadata {\n/**\n * @param {?} styles\n * @param {?=} offset\n */\nconstructor(\npublic styles: Array<string|{[key: string]: string | number}>,\npublic offset: number = null) {\n    super();\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAnimationStyleMetadata.prototype.styles;\n /** @type {?} */\nAnimationStyleMetadata.prototype.offset;\n  }\n\n}\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link animate animate\n * animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport class AnimationAnimateMetadata extends AnimationMetadata {\n/**\n * @param {?} timings\n * @param {?} styles\n */\nconstructor(\npublic timings: string|number,\npublic styles: AnimationStyleMetadata|AnimationKeyframesSequenceMetadata) {\n    super();\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAnimationAnimateMetadata.prototype.timings;\n /** @type {?} */\nAnimationAnimateMetadata.prototype.styles;\n  }\n\n}\n\n/**\n * @experimental Animation support is experimental.\n */\nexport abstract class AnimationWithStepsMetadata extends AnimationMetadata {\n/**\n */\nconstructor() { super(); }\n  get steps(): AnimationMetadata[] { throw new Error('NOT IMPLEMENTED: Base Class'); }\n}\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link sequence sequence\n * animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport class AnimationSequenceMetadata extends AnimationWithStepsMetadata {\n/**\n * @param {?} _steps\n */\nconstructor(private _steps: AnimationMetadata[]) { super(); }\n  get steps(): AnimationMetadata[] { return this._steps; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAnimationSequenceMetadata.prototype._steps;\n  }\n\n}\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link group group animation\n * function} is called.\n *\n * @experimental Animation support is experimental.\n */\nexport class AnimationGroupMetadata extends AnimationWithStepsMetadata {\n/**\n * @param {?} _steps\n */\nconstructor(private _steps: AnimationMetadata[]) { super(); }\n  get steps(): AnimationMetadata[] { return this._steps; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAnimationGroupMetadata.prototype._steps;\n  }\n\n}\n/**\n *  `animate` is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the {@link Component#animations-anchor component animations metadata page} to gain a better understanding of how animations in Angular2 are used. * `animate` specifies an animation step that will apply the provided `styles` data for a given amount of time based on the provided `timing` expression value. Calls to `animate` are expected to be used within {@link sequence an animation sequence}, {@link group group}, or {@link transition transition}. * ### Usage * The `animate` function accepts two input parameters: `timing` and `styles`: * - `timing` is a string based value that can be a combination of a duration with optional delay and easing values. The format for the expression breaks down to `duration delay easing` (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000, delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the `duration` value in millisecond form. - `styles` is the style input data which can either be a call to {@link style style} or {@link keyframes keyframes}. If left empty then the styles from the destination state will be collected and used (this is useful when describing an animation step that will complete an animation by {@link transition#the-final-animate-call animating to the final state}). * ```typescript // various functions for specifying timing data animate(500, style(...)) animate(\"1s\", style(...)) animate(\"100ms 0.5s\", style(...)) animate(\"5s ease\", style(...)) animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...)) * // either style() of keyframes() can be used animate(500, style({ background: \"red\" })) animate(500, keyframes([ style({ background: \"blue\" })), style({ background: \"red\" })) ]) ``` * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview)) * {@example core/animation/ts/dsl/animation_example.ts region='Component'} *\n * @param {?} timing\n * @param {?=} styles\n * @return {?}\n */\nexport function animate(\n    timing: string | number, styles: AnimationStyleMetadata | AnimationKeyframesSequenceMetadata =\n                                 null): AnimationAnimateMetadata {\n  let /** @type {?} */ stylesEntry = styles;\n  if (!isPresent(stylesEntry)) {\n    const /** @type {?} */ EMPTY_STYLE: {[key: string]: string | number} = {};\n    stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);\n  }\n  return new AnimationAnimateMetadata(timing, stylesEntry);\n}\n/**\n *  `group` is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the {@link Component#animations-anchor component animations metadata page} to gain a better understanding of how animations in Angular2 are used. * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are useful when a series of styles must be animated/closed off at different statrting/ending times. * The `group` function can either be used within a {@link sequence sequence} or a {@link transition transition} and it will only continue to the next instruction once all of the inner animation steps have completed. * ### Usage * The `steps` data that is passed into the `group` animation function can either consist of {@link style style} or {@link animate animate} function calls. Each call to `style()` or `animate()` within a group will be executed instantly (use {@link keyframes keyframes} or a {@link animate#usage animate() with a delay value} to offset styles to be applied at a later time). * ```typescript group([ animate(\"1s\", { background: \"black\" })) animate(\"2s\", { color: \"white\" })) ]) ``` * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview)) * {@example core/animation/ts/dsl/animation_example.ts region='Component'} *\n * @param {?} steps\n * @return {?}\n */\nexport function group(steps: AnimationMetadata[]): AnimationGroupMetadata {\n  return new AnimationGroupMetadata(steps);\n}\n/**\n *  `sequence` is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the {@link Component#animations-anchor component animations metadata page} to gain a better understanding of how animations in Angular2 are used. * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by default when an array is passed as animation data into {@link transition transition}.) * The `sequence` function can either be used within a {@link group group} or a {@link transition transition} and it will only continue to the next instruction once each of the inner animation steps have completed. * To perform animation styling in parallel with other animation steps then have a look at the {@link group group} animation function. * ### Usage * The `steps` data that is passed into the `sequence` animation function can either consist of {@link style style} or {@link animate animate} function calls. A call to `style()` will apply the provided styling data immediately while a call to `animate()` will apply its styling data over a given time depending on its timing data. * ```typescript sequence([ style({ opacity: 0 })), animate(\"1s\", { opacity: 1 })) ]) ``` * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview)) * {@example core/animation/ts/dsl/animation_example.ts region='Component'} *\n * @param {?} steps\n * @return {?}\n */\nexport function sequence(steps: AnimationMetadata[]): AnimationSequenceMetadata {\n  return new AnimationSequenceMetadata(steps);\n}\n/**\n *  `style` is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the {@link Component#animations-anchor component animations metadata page} to gain a better understanding of how animations in Angular2 are used. * `style` declares a key/value object containing CSS properties/styles that can then be used for {@link state animation states}, within an {@link sequence animation sequence}, or as styling data for both {@link animate animate} and {@link keyframes keyframes}. * ### Usage * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs to be defined. * ```typescript // string values are used for css properties style({ background: \"red\", color: \"blue\" }) * // numerical (pixel) values are also supported style({ width: 100, height: 0 }) ``` * #### Auto-styles (using `*`) * When an asterix (`*`) character is used as a value then it will be detected from the element being animated and applied as animation data when the animation starts. * This feature proves useful for a state depending on layout and/or environment factors; in such cases the styles are calculated just before the animation starts. * ```typescript // the steps below will animate from 0 to the // actual height of the element style({ height: 0 }), animate(\"1s\", style({ height: \"*\" })) ``` * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview)) * {@example core/animation/ts/dsl/animation_example.ts region='Component'} *\n * @param {?} tokens\n * @return {?}\n */\nexport function style(\n    tokens: string | {[key: string]: string | number} |\n    Array<string|{[key: string]: string | number}>): AnimationStyleMetadata {\n  let /** @type {?} */ input: Array<{[key: string]: string | number}|string>;\n  let /** @type {?} */ offset: number = null;\n  if (typeof tokens === 'string') {\n    input = [ /** @type {?} */((<string>tokens))];\n  } else {\n    if (Array.isArray(tokens)) {\n      input = /** @type {?} */(( <Array<{[key: string]: string | number}>>tokens));\n    } else {\n      input = [ /** @type {?} */((<{[key: string]: string | number}>tokens))];\n    }\n    input.forEach(entry => {\n      const /** @type {?} */ entryOffset = ( /** @type {?} */((entry as any)) /** TODO #9100 */)['offset'];\n      if (isPresent(entryOffset)) {\n        offset = offset == null ? parseFloat(entryOffset) : offset;\n      }\n    });\n  }\n  return new AnimationStyleMetadata(input, offset);\n}\n/**\n *  `state` is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the {@link Component#animations-anchor component animations metadata page} to gain a better understanding of how animations in Angular2 are used. * `state` declares an animation state within the given trigger. When a state is active within a component then its associated styles will persist on the element that the trigger is attached to (even when the animation ends). * To animate between states, have a look at the animation {@link transition transition} DSL function. To register states to an animation trigger please have a look at the {@link trigger trigger} function. * #### The `void` state * The `void` state value is a reserved word that angular uses to determine when the element is not apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the associated element is void). * #### The `*` (default) state * The `*` state (when styled) is a fallback state that will be used if the state that is being animated is not declared within the trigger. * ### Usage * `state` will declare an animation state with its associated styles within the given trigger. * - `stateNameExpr` can be one or more state names separated by commas. - `styles` refers to the {@link style styling data} that will be persisted on the element once the state has been reached. * ```typescript // \"void\" is a reserved name for a state and is used to represent // the state in which an element is detached from from the application. state(\"void\", style({ height: 0 })) * // user-defined states state(\"closed\", style({ height: 0 })) state(\"open, visible\", style({ height: \"*\" })) ``` * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview)) * {@example core/animation/ts/dsl/animation_example.ts region='Component'} *\n * @param {?} stateNameExpr\n * @param {?} styles\n * @return {?}\n */\nexport function state(\n    stateNameExpr: string, styles: AnimationStyleMetadata): AnimationStateDeclarationMetadata {\n  return new AnimationStateDeclarationMetadata(stateNameExpr, styles);\n}\n/**\n *  `keyframes` is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the {@link Component#animations-anchor component animations metadata page} to gain a better understanding of how animations in Angular2 are used. * `keyframes` specifies a collection of {@link style style} entries each optionally characterized by an `offset` value. * ### Usage * The `keyframes` animation function is designed to be used alongside the {@link animate animate} animation function. Instead of applying animations from where they are currently to their destination, keyframes can describe how each style entry is applied and at what point within the animation arc (much like CSS Keyframe Animations do). * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what percentage of the animate time the styles will be applied. * ```typescript // the provided offset values describe when each backgroundColor value is applied. animate(\"5s\", keyframes([ style({ backgroundColor: \"red\", offset: 0 }), style({ backgroundColor: \"blue\", offset: 0.2 }), style({ backgroundColor: \"orange\", offset: 0.3 }), style({ backgroundColor: \"black\", offset: 1 }) ])) ``` * Alternatively, if there are no `offset` values used within the style entries then the offsets will be calculated automatically. * ```typescript animate(\"5s\", keyframes([ style({ backgroundColor: \"red\" }) // offset = 0 style({ backgroundColor: \"blue\" }) // offset = 0.33 style({ backgroundColor: \"orange\" }) // offset = 0.66 style({ backgroundColor: \"black\" }) // offset = 1 ])) ``` * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview)) * {@example core/animation/ts/dsl/animation_example.ts region='Component'} *\n * @param {?} steps\n * @return {?}\n */\nexport function keyframes(steps: AnimationStyleMetadata[]): AnimationKeyframesSequenceMetadata {\n  return new AnimationKeyframesSequenceMetadata(steps);\n}\n/**\n *  `transition` is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the {@link Component#animations-anchor component animations metadata page} to gain a better understanding of how animations in Angular2 are used. * `transition` declares the {@link sequence sequence of animation steps} that will be run when the provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state). * Animation transitions are placed within an {@link trigger animation trigger}. For an transition to animate to a state value and persist its styles then one or more {@link state animation states} is expected to be defined. * ### Usage * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on what the previous state is and what the current state has become. In other words, if a transition is defined that matches the old/current state criteria then the associated animation will be triggered. * ```typescript // all transition/state changes are defined within an animation trigger trigger(\"myAnimationTrigger\", [ // if a state is defined then its styles will be persisted when the // animation has fully completed itself state(\"on\", style({ background: \"green\" })), state(\"off\", style({ background: \"grey\" })), * // a transition animation that will be kicked off when the state value // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\" transition(\"on => off\", animate(500)), * // it is also possible to do run the same animation for both directions transition(\"on <=> off\", animate(500)), * // or to define multiple states pairs separated by commas transition(\"on => off, off => void\", animate(500)), * // this is a catch-all state change for when an element is inserted into // the page and the destination state is unknown transition(\"void => *\", [ style({ opacity: 0 }), animate(500) ]), * // this will capture a state change between any states transition(\"* => *\", animate(\"1s 0s\")), ]) ``` * The template associated with this component will make use of the `myAnimationTrigger` animation trigger by binding to an element within its template code. * ```html <!-- somewhere inside of my-component-tpl.html --> <div [@myAnimationTrigger]=\"myStatusExp\">...</div> ``` * #### The final `animate` call * If the final step within the transition steps is a call to `animate()` that **only** uses a timing value with **no style data** then it will be automatically used as the final animation arc for the element to animate itself to the final state. This involves an automatic mix of adding/removing CSS styles so that the element will be in the exact state it should be for the applied state to be presented correctly. * ``` // start off by hiding the element, but make sure that it animates properly to whatever state // is currently active for \"myAnimationTrigger\" transition(\"void => *\", [ style({ opacity: 0 }), animate(500) ]) ``` * ### Transition Aliases (`:enter` and `:leave`) * Given that enter (insertion) and leave (removal) animations are so common, the `transition` function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `* => void` state changes. * ``` transition(\":enter\", [ style({ opacity: 0 }), animate(500, style({ opacity: 1 })) ]) transition(\":leave\", [ animate(500, style({ opacity: 0 })) ]) ``` * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview)) * {@example core/animation/ts/dsl/animation_example.ts region='Component'} *\n * @param {?} stateChangeExpr\n * @param {?} steps\n * @return {?}\n */\nexport function transition(stateChangeExpr: string, steps: AnimationMetadata | AnimationMetadata[]):\n    AnimationStateTransitionMetadata {\n  const /** @type {?} */ animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;\n  return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);\n}\n/**\n *  `trigger` is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the {@link Component#animations-anchor component animations metadata page} to gain a better understanding of how animations in Angular2 are used. * `trigger` Creates an animation trigger which will a list of {@link state state} and {@link transition transition} entries that will be evaluated when the expression bound to the trigger changes. * Triggers are registered within the component annotation data under the {@link Component#animations-anchor animations section}. An animation trigger can be placed on an element within a template by referencing the name of the trigger followed by the expression value that the trigger is bound to (in the form of `[@triggerName]=\"expression\"`. * ### Usage * `trigger` will create an animation trigger reference based on the provided `name` value. The provided `animation` value is expected to be an array consisting of {@link state state} and {@link transition transition} declarations. * ```typescript selector: 'my-component', templateUrl: 'my-component-tpl.html', animations: [ trigger(\"myAnimationTrigger\", [ state(...), state(...), transition(...), transition(...) ]) ] }) class MyComponent { myStatusExp = \"something\"; } ``` * The template associated with this component will make use of the `myAnimationTrigger` animation trigger by binding to an element within its template code. * ```html <!-- somewhere inside of my-component-tpl.html --> <div [@myAnimationTrigger]=\"myStatusExp\">...</div> ``` * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview)) * {@example core/animation/ts/dsl/animation_example.ts region='Component'} *\n * @param {?} name\n * @param {?} animation\n * @return {?}\n */\nexport function trigger(name: string, animation: AnimationMetadata[]): AnimationEntryMetadata {\n  return new AnimationEntryMetadata(name, animation);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}