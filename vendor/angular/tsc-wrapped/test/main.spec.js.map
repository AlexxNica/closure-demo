{"version":3,"file":"main.spec.js","sourceRoot":"","sources":["../../../../../tools/@angular/tsc-wrapped/test/main.spec.ts"],"names":[],"mappings":";AAAA,qBAAmB,aAAa,CAAC,CAAA;AACjC,6BAA0B,gBAAgB,CAAC,CAAA;AAE3C,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,QAAQ,CAAC,aAAa,EAAE;IACtB,IAAI,QAAgB,CAAC;IACrB,IAAI,KAAkD,CAAC;IAEvD,UAAU,CAAC;QACT,QAAQ,GAAG,0BAAW,EAAE,CAAC;QACzB,KAAK,GAAG,UAAC,QAAgB,EAAE,OAAe;YACxC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,OAAO,EAAE,EAAC,QAAQ,EAAE,OAAO,EAAC,CAAC,CAAC;QAChF,CAAC,CAAC;QACF,KAAK,CAAC,SAAS,EAAE,iKAOhB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,iBAAiB,GAAW;QAC1B,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,UAAQ,GAAK,CAAC,EAAE,EAAC,QAAQ,EAAE,OAAO,EAAC,CAAC,CAAC;IAC3F,CAAC;IAED,EAAE,CAAC,0CAA0C,EAAE;QAC7C,WAAI,CAAC,WAAW,EAAE,IAAW,CAAC;aAC3B,IAAI,CAAC,cAAM,OAAA,IAAI,CAAC,qBAAqB,CAAC,EAA3B,CAA2B,CAAC;aACvC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAArC,CAAqC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,UAAC,IAAI;QACpC,KAAK,CAAC,eAAe,EAAE,gWAYrB,CAAC,CAAC;QAEJ,WAAI,CAAC,QAAQ,EAAE,EAAC,kBAAQ,EAAC,CAAC;aACvB,IAAI,CAAC;YACJ,IAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;YAC1B,2CAA2C;YAC3C,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACxC,iCAAiC;YACjC,MAAM,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YACxC,iCAAiC;YACjC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,2CAA2C,CAAC,CAAC;YACjE,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;YAC7C,IAAM,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;YAC1C,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC;YAC3D,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAZ,CAAY,CAAC,CAC1B;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0EAA0E,EAAE,UAAC,IAAI;QAClF,KAAK,CAAC,eAAe,EAAE,iTAWrB,CAAC,CAAC;QACJ,WAAI,CAAC,QAAQ,EAAE,EAAC,kBAAQ,EAAC,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,IAAI,EAAE,EAAN,CAAM,CAAC,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAZ,CAAY,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {main} from '../src/main';\nimport {makeTempDir} from './test_support';\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe('tsc-wrapped', () => {\n  let basePath: string;\n  let write: (fileName: string, content: string) => void;\n\n  beforeEach(() => {\n    basePath = makeTempDir();\n    write = (fileName: string, content: string) => {\n      fs.writeFileSync(path.join(basePath, fileName), content, {encoding: 'utf-8'});\n    };\n    write('test.ts', `\n      /** @Annotation */ let Component: Function;\n      \n      @Component({})\n      export class Comp {\n        method(x: string): void {}\n      }\n    `);\n  });\n\n  function readOut(ext: string) {\n    return fs.readFileSync(path.join(basePath, 'built', `test.${ext}`), {encoding: 'utf-8'});\n  }\n\n  it('should report error if project not found', () => {\n    main('not-exist', null as any)\n      .then(() => fail('should report error'))\n      .catch(e => expect(e.message).toContain('ENOENT'));\n  });\n\n  it('should pre-process sources', (done) => {\n    write('tsconfig.json', `{\n      \"compilerOptions\": {\n        \"experimentalDecorators\": true,\n        \"types\": [],\n        \"outDir\": \"built\",\n        \"declaration\": true\n      },\n      \"angularCompilerOptions\": {\n        \"annotateForClosureCompiler\": true,\n        \"annotationsAs\": \"static fields\"\n      },\n      \"files\": [\"test.ts\"]\n    }`);\n\n    main(basePath, {basePath})\n      .then(() => {\n        const out = readOut('js');\n        // No helpers since decorators were lowered\n        expect(out).not.toContain('__decorate');\n        // Annotated for Closure compiler\n        expect(out).toContain('* @param {?} x');\n        // Decorator is now an annotation\n        expect(out).toMatch(/Comp.decorators = \\[\\s+\\{ type: Component/);\n        const decl = readOut('d.ts');\n        expect(decl).toContain('declare class Comp');\n        const metadata = readOut('metadata.json');\n        expect(metadata).toContain('\"Comp\":{\"__symbolic\":\"class\"');\n        done();\n      })\n      .catch(e => done.fail(e))\n    ;\n  });\n\n  it('should allow closure compiler annotations without decorator downleveling', (done) => {\n    write('tsconfig.json', `{\n      \"compilerOptions\": {\n        \"experimentalDecorators\": true,\n        \"types\": [],\n        \"outDir\": \"built\",\n        \"declaration\": true\n      },\n      \"angularCompilerOptions\": {\n        \"annotateForClosureCompiler\": true\n      },\n      \"files\": [\"test.ts\"]\n    }`);\n    main(basePath, {basePath}).then(() => done()).catch(e => done.fail(e));\n  });\n});\n"]}