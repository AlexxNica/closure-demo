{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../../tools/@angular/tsc-wrapped/src/main.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {check, tsc} from './tsc';\n\nimport NgOptions from './options';\nimport {MetadataWriterHost, DecoratorDownlevelCompilerHost, TsickleCompilerHost} from './compiler_host';\nimport {CliOptions} from './cli_options';\n\nexport type CodegenExtension =\n    (ngOptions: NgOptions, cliOptions: CliOptions, program: ts.Program, host: ts.CompilerHost) =>\n        Promise<void>;\n\nexport function main(\n    project: string, cliOptions: CliOptions, codegen?: CodegenExtension): Promise<any> {\n  try {\n    let projectDir = project;\n    if (fs.lstatSync(project).isFile()) {\n      projectDir = path.dirname(project);\n    }\n\n    // file names in tsconfig are resolved relative to this absolute path\n    const basePath = path.resolve(process.cwd(), cliOptions.basePath || projectDir);\n\n    // read the configuration options from wherever you store them\n    const {parsed, ngOptions} = tsc.readConfiguration(project, basePath);\n    ngOptions.basePath = basePath;\n    const createProgram = (host: ts.CompilerHost, oldProgram?: ts.Program) =>\n      ts.createProgram(parsed.fileNames, parsed.options, host, oldProgram);\n\n    const host = ts.createCompilerHost(parsed.options, true);\n\n    // HACK: patch the realpath to solve symlink issue here:\n    // https://github.com/Microsoft/TypeScript/issues/9552\n    // todo(misko): remove once facade symlinks are removed\n    host.realpath = (path) => path;\n\n    const program = createProgram(host);\n    const errors = program.getOptionsDiagnostics();\n    check(errors);\n\n    if (ngOptions.skipTemplateCodegen || !codegen) {\n      codegen = () => Promise.resolve(null);\n    }\n\n    return codegen(ngOptions, cliOptions, program, host).then(() => {\n      // Create a new program since codegen files were created after making the old program\n      let programWithCodegen = createProgram(host, program);\n      tsc.typeCheck(host, programWithCodegen);\n\n      let preprocessHost = host;\n      let programForJsEmit = programWithCodegen;\n\n      if (ngOptions.annotationsAs === 'static fields') {\n        const downlevelHost = new DecoratorDownlevelCompilerHost(preprocessHost, programWithCodegen);\n        // A program can be re-used only once; save the programWithCodegen to be reused by metadataWriter\n        programForJsEmit = createProgram(downlevelHost);\n        check(downlevelHost.diagnostics);\n        preprocessHost = downlevelHost;\n      }\n\n      if (ngOptions.annotateForClosureCompiler) {\n        const tsickleHost = new TsickleCompilerHost(preprocessHost, programForJsEmit, ngOptions);\n        programForJsEmit = createProgram(tsickleHost);\n        check(tsickleHost.diagnostics);\n      }\n\n      // Emit *.js and *.js.map\n      tsc.emit(programForJsEmit);\n\n      if (!ngOptions.skipMetadataEmit) {\n        // Emit *.metadata.json and *.d.ts\n        // Not in the same emit pass with above, because tsickle erases\n        // decorators which we want to read or document.\n        // Do this emit second since TypeScript will create missing directories for us\n        // in the standard emit.\n        const metadataWriter = new MetadataWriterHost(host, programWithCodegen, ngOptions);\n        tsc.emit(createProgram(metadataWriter, programWithCodegen));\n      }\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\n// CLI entry point\nif (require.main === module) {\n  const args = require('minimist')(process.argv.slice(2));\n  const project = args.p || args.project || '.';\n  const cliOptions = new CliOptions(args);\n  main(project, cliOptions).then((exitCode: any) => process.exit(exitCode)).catch((e: any) => {\n    console.error(e.stack);\n    console.error('Compilation failed');\n    process.exit(1);\n  });\n}\n"]}