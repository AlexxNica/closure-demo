{"version":3,"file":"options.js","sourceRoot":"","sources":["../../../../../tools/@angular/tsc-wrapped/src/options.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\ninterface Options extends ts.CompilerOptions {\n  // Absolute path to a directory where generated file structure is written.\n  // If unspecified, generated files will be written alongside sources.\n  genDir?: string;\n\n  // Path to the directory containing the tsconfig.json file.\n  basePath?: string;\n\n  // Don't produce .metadata.json files (they don't work for bundled emit with --out)\n  skipMetadataEmit?: boolean;\n\n  // Produce an error if the metadata written for a class would produce an error if used.\n  strictMetadataEmit?: boolean;\n\n  // Don't produce .ngfactory.ts or .css.shim.ts files\n  skipTemplateCodegen?: boolean;\n\n  // Whether to generate code for library code.\n  // If true, produce .ngfactory.ts and .css.shim.ts files for .d.ts inputs.\n  // Default is true.\n  generateCodeForLibraries?: boolean;\n\n  // Insert JSDoc type annotations needed by Closure Compiler\n  annotateForClosureCompiler?: boolean;\n\n  // Modify how angular annotations are emitted to improve tree-shaking.\n  // decorator: Leave the Decorators in-place.\n  //            TypeScript will emit calls to the __decorate helper.\n  //            `--emitDecoratorMetadata` can be used for runtime reflection.\n  //            This is required for compatibility with the JIT Angular compiler.\n  // static field: Replace decorators with a static field in the class.\n  //               Allows advanced tree-shakers like Closure Compiler to remove\n  //               unused classes. The resulting code can only be used with AoT.\n  annotationsAs?: string; /* 'decorator'|'static field' */\n\n  // Print extra information while running the compiler\n  trace?: boolean;\n\n  // Whether to embed debug information in the compiled templates\n  debug?: boolean;\n}\n\nexport default Options;\n"]}